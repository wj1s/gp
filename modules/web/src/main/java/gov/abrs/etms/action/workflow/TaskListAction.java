/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package gov.abrs.etms.action.workflow;

import gov.abrs.etms.action.util.BaseAction;
import gov.abrs.etms.common.util.Carrier;
import gov.abrs.etms.model.baseinfo.Person;
import gov.abrs.etms.service.workflow.WorkFlowService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.httpclient.util.DateUtil;
import org.apache.struts2.ServletActionContext;
import org.jbpm.graph.exe.ProcessInstance;
import org.springframework.beans.factory.annotation.Autowired;

import com.opensymphony.xwork2.Action;

public class TaskListAction extends BaseAction {
	private static final long serialVersionUID = 1123891330641694611L;
	private Integer taskType;//taskType:任务类型，０－待办 １－已办
	private Integer filter;
	private Carrier<ProcessInstance> carrier;
	private List<Map<String, ProcessInstance>> newList;

	@Override
	public String execute() throws Exception {
		Person person = getCurUser();
		List<ProcessInstance> piList = workFlowService.getProcessInstances(taskType, person);
		newList = new ArrayList<Map<String, ProcessInstance>>();
		for (int i = piList.size() - 1; i >= 0; i--) {
			ProcessInstance processInstance = piList.get(i);
			String desc = (String) processInstance.getContextInstance().getVariable("taskDescription");
			Map<String, ProcessInstance> piMap = new TreeMap<String, ProcessInstance>();
			piMap.put(desc, processInstance);
			newList.add(piMap);
		}
		return Action.SUCCESS;
	}

	public void taskList() throws IOException {
		HttpServletResponse response = ServletActionContext.getResponse();
		JSONArray jsonArray = new JSONArray();
		Person person = getCurUser();
		List<ProcessInstance> piList = workFlowService.getProcessInstances(taskType, person);
		carrier.setTotalSize(piList.size());
		if (carrier.getCurrentPage() > carrier.getTotalPage()) {
			carrier.setCurrentPage(1);
		}
		int firstId = carrier.getPageSize() * (carrier.getCurrentPage() - 1);
		int lastId = carrier.getPageSize() * carrier.getCurrentPage();
		if (lastId > piList.size()) {
			lastId = piList.size();
			if (firstId < 0) {
				firstId = 0;
			}
		}
		piList = piList.subList(firstId, lastId);
		for (int i = piList.size() - 1; i >= 0; i--) {
			ProcessInstance processInstance = piList.get(i);
			String desc = (String) processInstance.getContextInstance().getVariable("taskDescription");
			JSONObject jsonObject = new JSONObject();
			jsonObject.put("id", processInstance.getId());
			jsonObject.put("name", desc);
			jsonObject.put("state", processInstance.getRootToken().getNode().getName());
			jsonObject.put(
					"start",
					processInstance.getStart() == null ? "" : DateUtil.formatDate(processInstance.getStart(),
							"yyyy-MM-dd HH:mm:ss"));
			jsonObject.put(
					"end",
					processInstance.getEnd() == null ? "流程未结束" : DateUtil.formatDate(processInstance.getEnd(),
							"yyyy-MM-dd HH:mm:ss"));
			jsonArray.add(jsonObject);
		}
		carrier.setResult(piList);

		JSONObject jsonObj = new JSONObject();
		jsonObj.put("page", carrier.getCurrentPage());//carrier.getCurrentPage()
		jsonObj.put("total", carrier.getTotalPage());//carrier.getTotalPage()
		jsonObj.put("records", carrier.getTotalSize());//carrier.getTotalSize()
		jsonObj.put("data", jsonArray.toString());
		response.setContentType("text/json; charset=UTF-8");
		response.getWriter().write(jsonObj.toString());
		//return Action.SUCCESS;
	}

	private WorkFlowService workFlowService;

	@Autowired
	public void setWorkFlowService(WorkFlowService workFlowService) {
		this.workFlowService = workFlowService;
	}

	public Integer getTaskType() {
		return taskType;
	}

	public void setTaskType(Integer taskType) {
		this.taskType = taskType;
	}

	public Integer getFilter() {
		return filter;
	}

	public void setFilter(Integer filter) {
		this.filter = filter;
	}

	public List<Map<String, ProcessInstance>> getNewList() {
		return newList;
	}

	public void setNewList(List<Map<String, ProcessInstance>> newList) {
		this.newList = newList;
	}

	//
	private void initCarrier() {
		if (carrier == null) {
			carrier = new Carrier<ProcessInstance>();
		}
	}

	public void setPage(Integer page) {
		initCarrier();
		this.carrier.setCurrentPage(page);
	}

	public void setSidx(String sidx) {
		initCarrier();
		this.carrier.setSidx(sidx);
	}

	public void setSord(String sord) {
		initCarrier();
		this.carrier.setSord(sord);
	}

	public void setFilters(String filters) {
		if (filters != null && filters.indexOf("taijiFilter=") != -1) {
			initCarrier();
			this.carrier.setFilters(filters.substring(12));
		}
	}

	public void setDelIds(String delIds) {
		initCarrier();
		this.carrier.setDelIds(delIds);
	}

	//Carrier的get方法
	public Carrier<ProcessInstance> getCarrier() {
		return carrier;
	}

}